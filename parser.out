Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE
    FALSE
    TRUE
    UMINUS

Grammar

Rule 0     S' -> programa
Rule 1     programa -> stmt_list
Rule 2     stmt_list -> stmt_list statement
Rule 3     stmt_list -> <empty>
Rule 4     statement -> BOM_DIA
Rule 5     statement -> BOA_TARDE
Rule 6     statement -> BOA_NOITE
Rule 7     statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI
Rule 8     statement -> RETURN expr SEMI
Rule 9     statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 10    statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 11    statement -> expr SEMI
Rule 12    param_list -> <empty>
Rule 13    param_list -> ID
Rule 14    param_list -> param_list COMMA ID
Rule 15    arg_list -> <empty>
Rule 16    arg_list -> expr
Rule 17    arg_list -> arg_list COMMA expr
Rule 18    expr -> ID ASSIGN expr
Rule 19    expr -> expr PLUS expr
Rule 20    expr -> expr MINUS expr
Rule 21    expr -> expr MUL expr
Rule 22    expr -> expr DIV expr
Rule 23    expr -> expr GE expr
Rule 24    expr -> expr LE expr
Rule 25    expr -> expr GT expr
Rule 26    expr -> expr LT expr
Rule 27    expr -> expr EQ expr
Rule 28    expr -> expr NE expr
Rule 29    expr -> MINUS expr
Rule 30    expr -> LPAREN expr RPAREN
Rule 31    expr -> NUMBER
Rule 32    expr -> ID LPAREN arg_list RPAREN
Rule 33    expr -> ID

Terminals, with rules where they appear

ASSIGN               : 18
BOA_NOITE            : 6
BOA_TARDE            : 5
BOM_DIA              : 4
COMMA                : 14 17
DIV                  : 22
ELSE                 : 
EQ                   : 27
FALSE                : 
FUNCTION             : 7
GE                   : 23
GT                   : 25
ID                   : 7 13 14 18 32 33
IF                   : 9
LBRACE               : 7 9 10
LE                   : 24
LPAREN               : 7 9 10 30 32
LT                   : 26
MINUS                : 20 29
MUL                  : 21
NE                   : 28
NUMBER               : 31
PLUS                 : 19
RBRACE               : 7 9 10
RETURN               : 8
RPAREN               : 7 9 10 30 32
SEMI                 : 7 8 11
TRUE                 : 
UMINUS               : 
WHILE                : 10
error                : 

Nonterminals, with rules where they appear

arg_list             : 17 32
expr                 : 8 9 10 11 16 17 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 30
param_list           : 7 14
programa             : 0
statement            : 2
stmt_list            : 1 2 7 9 10

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . stmt_list
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> .

    BOM_DIA         reduce using rule 3 (stmt_list -> .)
    BOA_TARDE       reduce using rule 3 (stmt_list -> .)
    BOA_NOITE       reduce using rule 3 (stmt_list -> .)
    FUNCTION        reduce using rule 3 (stmt_list -> .)
    RETURN          reduce using rule 3 (stmt_list -> .)
    IF              reduce using rule 3 (stmt_list -> .)
    WHILE           reduce using rule 3 (stmt_list -> .)
    ID              reduce using rule 3 (stmt_list -> .)
    MINUS           reduce using rule 3 (stmt_list -> .)
    LPAREN          reduce using rule 3 (stmt_list -> .)
    NUMBER          reduce using rule 3 (stmt_list -> .)
    $end            reduce using rule 3 (stmt_list -> .)

    programa                       shift and go to state 1
    stmt_list                      shift and go to state 2

state 1

    (0) S' -> programa .



state 2

    (1) programa -> stmt_list .
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . BOM_DIA
    (5) statement -> . BOA_TARDE
    (6) statement -> . BOA_NOITE
    (7) statement -> . FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI
    (8) statement -> . RETURN expr SEMI
    (9) statement -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (10) statement -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (11) statement -> . expr SEMI
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    $end            reduce using rule 1 (programa -> stmt_list .)
    BOM_DIA         shift and go to state 4
    BOA_TARDE       shift and go to state 5
    BOA_NOITE       shift and go to state 6
    FUNCTION        shift and go to state 7
    RETURN          shift and go to state 10
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    statement                      shift and go to state 3
    expr                           shift and go to state 11

state 3

    (2) stmt_list -> stmt_list statement .

    BOM_DIA         reduce using rule 2 (stmt_list -> stmt_list statement .)
    BOA_TARDE       reduce using rule 2 (stmt_list -> stmt_list statement .)
    BOA_NOITE       reduce using rule 2 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 2 (stmt_list -> stmt_list statement .)
    RETURN          reduce using rule 2 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 2 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 2 (stmt_list -> stmt_list statement .)
    ID              reduce using rule 2 (stmt_list -> stmt_list statement .)
    MINUS           reduce using rule 2 (stmt_list -> stmt_list statement .)
    LPAREN          reduce using rule 2 (stmt_list -> stmt_list statement .)
    NUMBER          reduce using rule 2 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 2 (stmt_list -> stmt_list statement .)
    RBRACE          reduce using rule 2 (stmt_list -> stmt_list statement .)


state 4

    (4) statement -> BOM_DIA .

    BOM_DIA         reduce using rule 4 (statement -> BOM_DIA .)
    BOA_TARDE       reduce using rule 4 (statement -> BOM_DIA .)
    BOA_NOITE       reduce using rule 4 (statement -> BOM_DIA .)
    FUNCTION        reduce using rule 4 (statement -> BOM_DIA .)
    RETURN          reduce using rule 4 (statement -> BOM_DIA .)
    IF              reduce using rule 4 (statement -> BOM_DIA .)
    WHILE           reduce using rule 4 (statement -> BOM_DIA .)
    ID              reduce using rule 4 (statement -> BOM_DIA .)
    MINUS           reduce using rule 4 (statement -> BOM_DIA .)
    LPAREN          reduce using rule 4 (statement -> BOM_DIA .)
    NUMBER          reduce using rule 4 (statement -> BOM_DIA .)
    $end            reduce using rule 4 (statement -> BOM_DIA .)
    RBRACE          reduce using rule 4 (statement -> BOM_DIA .)


state 5

    (5) statement -> BOA_TARDE .

    BOM_DIA         reduce using rule 5 (statement -> BOA_TARDE .)
    BOA_TARDE       reduce using rule 5 (statement -> BOA_TARDE .)
    BOA_NOITE       reduce using rule 5 (statement -> BOA_TARDE .)
    FUNCTION        reduce using rule 5 (statement -> BOA_TARDE .)
    RETURN          reduce using rule 5 (statement -> BOA_TARDE .)
    IF              reduce using rule 5 (statement -> BOA_TARDE .)
    WHILE           reduce using rule 5 (statement -> BOA_TARDE .)
    ID              reduce using rule 5 (statement -> BOA_TARDE .)
    MINUS           reduce using rule 5 (statement -> BOA_TARDE .)
    LPAREN          reduce using rule 5 (statement -> BOA_TARDE .)
    NUMBER          reduce using rule 5 (statement -> BOA_TARDE .)
    $end            reduce using rule 5 (statement -> BOA_TARDE .)
    RBRACE          reduce using rule 5 (statement -> BOA_TARDE .)


state 6

    (6) statement -> BOA_NOITE .

    BOM_DIA         reduce using rule 6 (statement -> BOA_NOITE .)
    BOA_TARDE       reduce using rule 6 (statement -> BOA_NOITE .)
    BOA_NOITE       reduce using rule 6 (statement -> BOA_NOITE .)
    FUNCTION        reduce using rule 6 (statement -> BOA_NOITE .)
    RETURN          reduce using rule 6 (statement -> BOA_NOITE .)
    IF              reduce using rule 6 (statement -> BOA_NOITE .)
    WHILE           reduce using rule 6 (statement -> BOA_NOITE .)
    ID              reduce using rule 6 (statement -> BOA_NOITE .)
    MINUS           reduce using rule 6 (statement -> BOA_NOITE .)
    LPAREN          reduce using rule 6 (statement -> BOA_NOITE .)
    NUMBER          reduce using rule 6 (statement -> BOA_NOITE .)
    $end            reduce using rule 6 (statement -> BOA_NOITE .)
    RBRACE          reduce using rule 6 (statement -> BOA_NOITE .)


state 7

    (7) statement -> FUNCTION . ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI

    ID              shift and go to state 16


state 8

    (18) expr -> ID . ASSIGN expr
    (32) expr -> ID . LPAREN arg_list RPAREN
    (33) expr -> ID .

    ASSIGN          shift and go to state 17
    LPAREN          shift and go to state 18
    SEMI            reduce using rule 33 (expr -> ID .)
    PLUS            reduce using rule 33 (expr -> ID .)
    MINUS           reduce using rule 33 (expr -> ID .)
    MUL             reduce using rule 33 (expr -> ID .)
    DIV             reduce using rule 33 (expr -> ID .)
    GE              reduce using rule 33 (expr -> ID .)
    LE              reduce using rule 33 (expr -> ID .)
    GT              reduce using rule 33 (expr -> ID .)
    LT              reduce using rule 33 (expr -> ID .)
    EQ              reduce using rule 33 (expr -> ID .)
    NE              reduce using rule 33 (expr -> ID .)
    RPAREN          reduce using rule 33 (expr -> ID .)
    COMMA           reduce using rule 33 (expr -> ID .)


state 9

    (30) expr -> LPAREN . expr RPAREN
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 19

state 10

    (8) statement -> RETURN . expr SEMI
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 20

state 11

    (11) statement -> expr . SEMI
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31


state 12

    (9) statement -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 32


state 13

    (10) statement -> WHILE . LPAREN expr RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 33


state 14

    (29) expr -> MINUS . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 34

state 15

    (31) expr -> NUMBER .

    SEMI            reduce using rule 31 (expr -> NUMBER .)
    PLUS            reduce using rule 31 (expr -> NUMBER .)
    MINUS           reduce using rule 31 (expr -> NUMBER .)
    MUL             reduce using rule 31 (expr -> NUMBER .)
    DIV             reduce using rule 31 (expr -> NUMBER .)
    GE              reduce using rule 31 (expr -> NUMBER .)
    LE              reduce using rule 31 (expr -> NUMBER .)
    GT              reduce using rule 31 (expr -> NUMBER .)
    LT              reduce using rule 31 (expr -> NUMBER .)
    EQ              reduce using rule 31 (expr -> NUMBER .)
    NE              reduce using rule 31 (expr -> NUMBER .)
    RPAREN          reduce using rule 31 (expr -> NUMBER .)
    COMMA           reduce using rule 31 (expr -> NUMBER .)


state 16

    (7) statement -> FUNCTION ID . LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI

    LPAREN          shift and go to state 35


state 17

    (18) expr -> ID ASSIGN . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 36

state 18

    (32) expr -> ID LPAREN . arg_list RPAREN
    (15) arg_list -> .
    (16) arg_list -> . expr
    (17) arg_list -> . arg_list COMMA expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    RPAREN          reduce using rule 15 (arg_list -> .)
    COMMA           reduce using rule 15 (arg_list -> .)
    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    arg_list                       shift and go to state 37
    expr                           shift and go to state 38

state 19

    (30) expr -> LPAREN expr . RPAREN
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    RPAREN          shift and go to state 39
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31


state 20

    (8) statement -> RETURN expr . SEMI
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            shift and go to state 40
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31


state 21

    (11) statement -> expr SEMI .

    BOM_DIA         reduce using rule 11 (statement -> expr SEMI .)
    BOA_TARDE       reduce using rule 11 (statement -> expr SEMI .)
    BOA_NOITE       reduce using rule 11 (statement -> expr SEMI .)
    FUNCTION        reduce using rule 11 (statement -> expr SEMI .)
    RETURN          reduce using rule 11 (statement -> expr SEMI .)
    IF              reduce using rule 11 (statement -> expr SEMI .)
    WHILE           reduce using rule 11 (statement -> expr SEMI .)
    ID              reduce using rule 11 (statement -> expr SEMI .)
    MINUS           reduce using rule 11 (statement -> expr SEMI .)
    LPAREN          reduce using rule 11 (statement -> expr SEMI .)
    NUMBER          reduce using rule 11 (statement -> expr SEMI .)
    $end            reduce using rule 11 (statement -> expr SEMI .)
    RBRACE          reduce using rule 11 (statement -> expr SEMI .)


state 22

    (19) expr -> expr PLUS . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 41

state 23

    (20) expr -> expr MINUS . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 42

state 24

    (21) expr -> expr MUL . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 43

state 25

    (22) expr -> expr DIV . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 44

state 26

    (23) expr -> expr GE . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 45

state 27

    (24) expr -> expr LE . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 46

state 28

    (25) expr -> expr GT . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 47

state 29

    (26) expr -> expr LT . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 48

state 30

    (27) expr -> expr EQ . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 49

state 31

    (28) expr -> expr NE . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 50

state 32

    (9) statement -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 51

state 33

    (10) statement -> WHILE LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 52

state 34

    (29) expr -> MINUS expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 29 (expr -> MINUS expr .)
    RPAREN          reduce using rule 29 (expr -> MINUS expr .)
    COMMA           reduce using rule 29 (expr -> MINUS expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31

  ! PLUS            [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! MUL             [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! DIV             [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! GE              [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! LE              [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! GT              [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! LT              [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! EQ              [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! NE              [ reduce using rule 29 (expr -> MINUS expr .) ]


state 35

    (7) statement -> FUNCTION ID LPAREN . param_list RPAREN LBRACE stmt_list RBRACE SEMI
    (12) param_list -> .
    (13) param_list -> . ID
    (14) param_list -> . param_list COMMA ID

    RPAREN          reduce using rule 12 (param_list -> .)
    COMMA           reduce using rule 12 (param_list -> .)
    ID              shift and go to state 53

    param_list                     shift and go to state 54

state 36

    (18) expr -> ID ASSIGN expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 18 (expr -> ID ASSIGN expr .)
    RPAREN          reduce using rule 18 (expr -> ID ASSIGN expr .)
    COMMA           reduce using rule 18 (expr -> ID ASSIGN expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31

  ! PLUS            [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! MUL             [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! DIV             [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! GE              [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! LE              [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! GT              [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! LT              [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! EQ              [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]
  ! NE              [ reduce using rule 18 (expr -> ID ASSIGN expr .) ]


state 37

    (32) expr -> ID LPAREN arg_list . RPAREN
    (17) arg_list -> arg_list . COMMA expr

    RPAREN          shift and go to state 55
    COMMA           shift and go to state 56


state 38

    (16) arg_list -> expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    RPAREN          reduce using rule 16 (arg_list -> expr .)
    COMMA           reduce using rule 16 (arg_list -> expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31


state 39

    (30) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 30 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 30 (expr -> LPAREN expr RPAREN .)


state 40

    (8) statement -> RETURN expr SEMI .

    BOM_DIA         reduce using rule 8 (statement -> RETURN expr SEMI .)
    BOA_TARDE       reduce using rule 8 (statement -> RETURN expr SEMI .)
    BOA_NOITE       reduce using rule 8 (statement -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 8 (statement -> RETURN expr SEMI .)
    RETURN          reduce using rule 8 (statement -> RETURN expr SEMI .)
    IF              reduce using rule 8 (statement -> RETURN expr SEMI .)
    WHILE           reduce using rule 8 (statement -> RETURN expr SEMI .)
    ID              reduce using rule 8 (statement -> RETURN expr SEMI .)
    MINUS           reduce using rule 8 (statement -> RETURN expr SEMI .)
    LPAREN          reduce using rule 8 (statement -> RETURN expr SEMI .)
    NUMBER          reduce using rule 8 (statement -> RETURN expr SEMI .)
    $end            reduce using rule 8 (statement -> RETURN expr SEMI .)
    RBRACE          reduce using rule 8 (statement -> RETURN expr SEMI .)


state 41

    (19) expr -> expr PLUS expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 19 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 19 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 19 (expr -> expr PLUS expr .)
    GE              reduce using rule 19 (expr -> expr PLUS expr .)
    LE              reduce using rule 19 (expr -> expr PLUS expr .)
    GT              reduce using rule 19 (expr -> expr PLUS expr .)
    LT              reduce using rule 19 (expr -> expr PLUS expr .)
    EQ              reduce using rule 19 (expr -> expr PLUS expr .)
    NE              reduce using rule 19 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 19 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 19 (expr -> expr PLUS expr .)
    MUL             shift and go to state 24
    DIV             shift and go to state 25

  ! MUL             [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 42

    (20) expr -> expr MINUS expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 20 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 20 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 20 (expr -> expr MINUS expr .)
    GE              reduce using rule 20 (expr -> expr MINUS expr .)
    LE              reduce using rule 20 (expr -> expr MINUS expr .)
    GT              reduce using rule 20 (expr -> expr MINUS expr .)
    LT              reduce using rule 20 (expr -> expr MINUS expr .)
    EQ              reduce using rule 20 (expr -> expr MINUS expr .)
    NE              reduce using rule 20 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 20 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 20 (expr -> expr MINUS expr .)
    MUL             shift and go to state 24
    DIV             shift and go to state 25

  ! MUL             [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 43

    (21) expr -> expr MUL expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 21 (expr -> expr MUL expr .)
    PLUS            reduce using rule 21 (expr -> expr MUL expr .)
    MINUS           reduce using rule 21 (expr -> expr MUL expr .)
    MUL             reduce using rule 21 (expr -> expr MUL expr .)
    DIV             reduce using rule 21 (expr -> expr MUL expr .)
    GE              reduce using rule 21 (expr -> expr MUL expr .)
    LE              reduce using rule 21 (expr -> expr MUL expr .)
    GT              reduce using rule 21 (expr -> expr MUL expr .)
    LT              reduce using rule 21 (expr -> expr MUL expr .)
    EQ              reduce using rule 21 (expr -> expr MUL expr .)
    NE              reduce using rule 21 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 21 (expr -> expr MUL expr .)
    COMMA           reduce using rule 21 (expr -> expr MUL expr .)

  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! MUL             [ shift and go to state 24 ]
  ! DIV             [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 44

    (22) expr -> expr DIV expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 22 (expr -> expr DIV expr .)
    PLUS            reduce using rule 22 (expr -> expr DIV expr .)
    MINUS           reduce using rule 22 (expr -> expr DIV expr .)
    MUL             reduce using rule 22 (expr -> expr DIV expr .)
    DIV             reduce using rule 22 (expr -> expr DIV expr .)
    GE              reduce using rule 22 (expr -> expr DIV expr .)
    LE              reduce using rule 22 (expr -> expr DIV expr .)
    GT              reduce using rule 22 (expr -> expr DIV expr .)
    LT              reduce using rule 22 (expr -> expr DIV expr .)
    EQ              reduce using rule 22 (expr -> expr DIV expr .)
    NE              reduce using rule 22 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 22 (expr -> expr DIV expr .)
    COMMA           reduce using rule 22 (expr -> expr DIV expr .)

  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! MUL             [ shift and go to state 24 ]
  ! DIV             [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 45

    (23) expr -> expr GE expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 23 (expr -> expr GE expr .)
    GE              reduce using rule 23 (expr -> expr GE expr .)
    LE              reduce using rule 23 (expr -> expr GE expr .)
    GT              reduce using rule 23 (expr -> expr GE expr .)
    LT              reduce using rule 23 (expr -> expr GE expr .)
    EQ              reduce using rule 23 (expr -> expr GE expr .)
    NE              reduce using rule 23 (expr -> expr GE expr .)
    RPAREN          reduce using rule 23 (expr -> expr GE expr .)
    COMMA           reduce using rule 23 (expr -> expr GE expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25

  ! PLUS            [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 46

    (24) expr -> expr LE expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 24 (expr -> expr LE expr .)
    GE              reduce using rule 24 (expr -> expr LE expr .)
    LE              reduce using rule 24 (expr -> expr LE expr .)
    GT              reduce using rule 24 (expr -> expr LE expr .)
    LT              reduce using rule 24 (expr -> expr LE expr .)
    EQ              reduce using rule 24 (expr -> expr LE expr .)
    NE              reduce using rule 24 (expr -> expr LE expr .)
    RPAREN          reduce using rule 24 (expr -> expr LE expr .)
    COMMA           reduce using rule 24 (expr -> expr LE expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25

  ! PLUS            [ reduce using rule 24 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 24 (expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 24 (expr -> expr LE expr .) ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 47

    (25) expr -> expr GT expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 25 (expr -> expr GT expr .)
    GE              reduce using rule 25 (expr -> expr GT expr .)
    LE              reduce using rule 25 (expr -> expr GT expr .)
    GT              reduce using rule 25 (expr -> expr GT expr .)
    LT              reduce using rule 25 (expr -> expr GT expr .)
    EQ              reduce using rule 25 (expr -> expr GT expr .)
    NE              reduce using rule 25 (expr -> expr GT expr .)
    RPAREN          reduce using rule 25 (expr -> expr GT expr .)
    COMMA           reduce using rule 25 (expr -> expr GT expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25

  ! PLUS            [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 48

    (26) expr -> expr LT expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 26 (expr -> expr LT expr .)
    GE              reduce using rule 26 (expr -> expr LT expr .)
    LE              reduce using rule 26 (expr -> expr LT expr .)
    GT              reduce using rule 26 (expr -> expr LT expr .)
    LT              reduce using rule 26 (expr -> expr LT expr .)
    EQ              reduce using rule 26 (expr -> expr LT expr .)
    NE              reduce using rule 26 (expr -> expr LT expr .)
    RPAREN          reduce using rule 26 (expr -> expr LT expr .)
    COMMA           reduce using rule 26 (expr -> expr LT expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25

  ! PLUS            [ reduce using rule 26 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 26 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 26 (expr -> expr LT expr .) ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 49

    (27) expr -> expr EQ expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 27 (expr -> expr EQ expr .)
    GE              reduce using rule 27 (expr -> expr EQ expr .)
    LE              reduce using rule 27 (expr -> expr EQ expr .)
    GT              reduce using rule 27 (expr -> expr EQ expr .)
    LT              reduce using rule 27 (expr -> expr EQ expr .)
    EQ              reduce using rule 27 (expr -> expr EQ expr .)
    NE              reduce using rule 27 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 27 (expr -> expr EQ expr .)
    COMMA           reduce using rule 27 (expr -> expr EQ expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25

  ! PLUS            [ reduce using rule 27 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 27 (expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 27 (expr -> expr EQ expr .) ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 50

    (28) expr -> expr NE expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    SEMI            reduce using rule 28 (expr -> expr NE expr .)
    GE              reduce using rule 28 (expr -> expr NE expr .)
    LE              reduce using rule 28 (expr -> expr NE expr .)
    GT              reduce using rule 28 (expr -> expr NE expr .)
    LT              reduce using rule 28 (expr -> expr NE expr .)
    EQ              reduce using rule 28 (expr -> expr NE expr .)
    NE              reduce using rule 28 (expr -> expr NE expr .)
    RPAREN          reduce using rule 28 (expr -> expr NE expr .)
    COMMA           reduce using rule 28 (expr -> expr NE expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25

  ! PLUS            [ reduce using rule 28 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 28 (expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 28 (expr -> expr NE expr .) ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! LT              [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! NE              [ shift and go to state 31 ]


state 51

    (9) statement -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    RPAREN          shift and go to state 57
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31


state 52

    (10) statement -> WHILE LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    RPAREN          shift and go to state 58
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31


state 53

    (13) param_list -> ID .

    RPAREN          reduce using rule 13 (param_list -> ID .)
    COMMA           reduce using rule 13 (param_list -> ID .)


state 54

    (7) statement -> FUNCTION ID LPAREN param_list . RPAREN LBRACE stmt_list RBRACE SEMI
    (14) param_list -> param_list . COMMA ID

    RPAREN          shift and go to state 59
    COMMA           shift and go to state 60


state 55

    (32) expr -> ID LPAREN arg_list RPAREN .

    SEMI            reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    MUL             reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    DIV             reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    GE              reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    LE              reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    GT              reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    LT              reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    EQ              reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    NE              reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 32 (expr -> ID LPAREN arg_list RPAREN .)


state 56

    (17) arg_list -> arg_list COMMA . expr
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 61

state 57

    (9) statement -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 62


state 58

    (10) statement -> WHILE LPAREN expr RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 63


state 59

    (7) statement -> FUNCTION ID LPAREN param_list RPAREN . LBRACE stmt_list RBRACE SEMI

    LBRACE          shift and go to state 64


state 60

    (14) param_list -> param_list COMMA . ID

    ID              shift and go to state 65


state 61

    (17) arg_list -> arg_list COMMA expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MUL expr
    (22) expr -> expr . DIV expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LE expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . EQ expr
    (28) expr -> expr . NE expr

    RPAREN          reduce using rule 17 (arg_list -> arg_list COMMA expr .)
    COMMA           reduce using rule 17 (arg_list -> arg_list COMMA expr .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    GT              shift and go to state 28
    LT              shift and go to state 29
    EQ              shift and go to state 30
    NE              shift and go to state 31


state 62

    (9) statement -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> .

    RBRACE          reduce using rule 3 (stmt_list -> .)
    BOM_DIA         reduce using rule 3 (stmt_list -> .)
    BOA_TARDE       reduce using rule 3 (stmt_list -> .)
    BOA_NOITE       reduce using rule 3 (stmt_list -> .)
    FUNCTION        reduce using rule 3 (stmt_list -> .)
    RETURN          reduce using rule 3 (stmt_list -> .)
    IF              reduce using rule 3 (stmt_list -> .)
    WHILE           reduce using rule 3 (stmt_list -> .)
    ID              reduce using rule 3 (stmt_list -> .)
    MINUS           reduce using rule 3 (stmt_list -> .)
    LPAREN          reduce using rule 3 (stmt_list -> .)
    NUMBER          reduce using rule 3 (stmt_list -> .)

    stmt_list                      shift and go to state 66

state 63

    (10) statement -> WHILE LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> .

    RBRACE          reduce using rule 3 (stmt_list -> .)
    BOM_DIA         reduce using rule 3 (stmt_list -> .)
    BOA_TARDE       reduce using rule 3 (stmt_list -> .)
    BOA_NOITE       reduce using rule 3 (stmt_list -> .)
    FUNCTION        reduce using rule 3 (stmt_list -> .)
    RETURN          reduce using rule 3 (stmt_list -> .)
    IF              reduce using rule 3 (stmt_list -> .)
    WHILE           reduce using rule 3 (stmt_list -> .)
    ID              reduce using rule 3 (stmt_list -> .)
    MINUS           reduce using rule 3 (stmt_list -> .)
    LPAREN          reduce using rule 3 (stmt_list -> .)
    NUMBER          reduce using rule 3 (stmt_list -> .)

    stmt_list                      shift and go to state 67

state 64

    (7) statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE . stmt_list RBRACE SEMI
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> .

    RBRACE          reduce using rule 3 (stmt_list -> .)
    BOM_DIA         reduce using rule 3 (stmt_list -> .)
    BOA_TARDE       reduce using rule 3 (stmt_list -> .)
    BOA_NOITE       reduce using rule 3 (stmt_list -> .)
    FUNCTION        reduce using rule 3 (stmt_list -> .)
    RETURN          reduce using rule 3 (stmt_list -> .)
    IF              reduce using rule 3 (stmt_list -> .)
    WHILE           reduce using rule 3 (stmt_list -> .)
    ID              reduce using rule 3 (stmt_list -> .)
    MINUS           reduce using rule 3 (stmt_list -> .)
    LPAREN          reduce using rule 3 (stmt_list -> .)
    NUMBER          reduce using rule 3 (stmt_list -> .)

    stmt_list                      shift and go to state 68

state 65

    (14) param_list -> param_list COMMA ID .

    RPAREN          reduce using rule 14 (param_list -> param_list COMMA ID .)
    COMMA           reduce using rule 14 (param_list -> param_list COMMA ID .)


state 66

    (9) statement -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . BOM_DIA
    (5) statement -> . BOA_TARDE
    (6) statement -> . BOA_NOITE
    (7) statement -> . FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI
    (8) statement -> . RETURN expr SEMI
    (9) statement -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (10) statement -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (11) statement -> . expr SEMI
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    RBRACE          shift and go to state 69
    BOM_DIA         shift and go to state 4
    BOA_TARDE       shift and go to state 5
    BOA_NOITE       shift and go to state 6
    FUNCTION        shift and go to state 7
    RETURN          shift and go to state 10
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 11
    statement                      shift and go to state 3

state 67

    (10) statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . BOM_DIA
    (5) statement -> . BOA_TARDE
    (6) statement -> . BOA_NOITE
    (7) statement -> . FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI
    (8) statement -> . RETURN expr SEMI
    (9) statement -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (10) statement -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (11) statement -> . expr SEMI
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    RBRACE          shift and go to state 70
    BOM_DIA         shift and go to state 4
    BOA_TARDE       shift and go to state 5
    BOA_NOITE       shift and go to state 6
    FUNCTION        shift and go to state 7
    RETURN          shift and go to state 10
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    expr                           shift and go to state 11
    statement                      shift and go to state 3

state 68

    (7) statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list . RBRACE SEMI
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . BOM_DIA
    (5) statement -> . BOA_TARDE
    (6) statement -> . BOA_NOITE
    (7) statement -> . FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI
    (8) statement -> . RETURN expr SEMI
    (9) statement -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (10) statement -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (11) statement -> . expr SEMI
    (18) expr -> . ID ASSIGN expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MUL expr
    (22) expr -> . expr DIV expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LE expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr EQ expr
    (28) expr -> . expr NE expr
    (29) expr -> . MINUS expr
    (30) expr -> . LPAREN expr RPAREN
    (31) expr -> . NUMBER
    (32) expr -> . ID LPAREN arg_list RPAREN
    (33) expr -> . ID

    RBRACE          shift and go to state 71
    BOM_DIA         shift and go to state 4
    BOA_TARDE       shift and go to state 5
    BOA_NOITE       shift and go to state 6
    FUNCTION        shift and go to state 7
    RETURN          shift and go to state 10
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    ID              shift and go to state 8
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 15

    statement                      shift and go to state 3
    expr                           shift and go to state 11

state 69

    (9) statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .

    BOM_DIA         reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOA_TARDE       reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOA_NOITE       reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ID              reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 9 (statement -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)


state 70

    (10) statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .

    BOM_DIA         reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOA_TARDE       reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOA_NOITE       reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ID              reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 10 (statement -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)


state 71

    (7) statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE . SEMI

    SEMI            shift and go to state 72


state 72

    (7) statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .

    BOM_DIA         reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    BOA_TARDE       reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    BOA_NOITE       reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    FUNCTION        reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    RETURN          reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    IF              reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    WHILE           reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    ID              reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    MINUS           reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    LPAREN          reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    NUMBER          reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    $end            reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)
    RBRACE          reduce using rule 7 (statement -> FUNCTION ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE SEMI .)

