import java_cup.runtime.*;
import java.io.*;

parser code {:
    scanner s;
    parser(scanner s){ this.s=s; }
:}

scan with {: return s.next_token(); :};

// Palavras-chave (keywords) da linguagem
terminal RETURN, TRUE, FALSE, IF, ELSE, FOR, WHILE;

// Delimitadores e símbolos de agrupamento
terminal SEMI,   // ponto e vírgula ";"
         COMMA;  // vírgula ","
terminal LBRACE, // abre chave "{"
         RBRACE, // fecha chave "}"
         LPAREN, // abre parênteses "("
         RPAREN; // fecha parênteses ")"

// Operadores aritméticos básicos
terminal PLUS,   // soma "+"
         MINUS,  // subtração "-"
         MUL,    // multiplicação "*"
         DIV;    // divisão "/"

// Operadores relacionais / comparadores
terminal GE,     // maior ou igual ">="
         LE,     // menor ou igual "<="
         EQ,     // igual "=="
         NE,     // diferente "!="
         GT,     // maior ">"
         LT;     // menor "<"

// Outros operadores e tokens importantes
terminal ASSIGN, // atribuição "="
         UMINUS; // operador unário menos (para precedência no parser)

// Tokens de valores e identificadores
terminal NUMBER; // números literais (ex: 123, 4.56)
terminal ID;     // identificadores (nomes de variáveis, funções etc.)

non terminal           expr_list;
non terminal Double    expr;

precedence left PLUS, MINUS;
precedence left MUL;
precedence left UMINUS;

expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;

expr      ::= expr:e1 PLUS expr:e2          {: RESULT = e1 + e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1 - e2;       :}
             | expr:e1 MUL expr:e2          {: RESULT = e1 * e2;       :} 
             | MINUS expr:e                 {: RESULT = -e;            :}
               %prec UMINUS
             | LPAREN expr:e RPAREN         {: RESULT = e;             :}
             | NUMBER:n                     {: RESULT = (Double) n; :}
             ;
