import java_cup.runtime.*;
import java.io.*;


parser code {:
    scanner s;
    parser(scanner s) { this.s = s; }
:}

scan with {: return s.next_token(); :};

//simboloso terminais
terminal RETURN, TRUE, FALSE, IF, ELSE, FOR, WHILE;
    
terminal SEMI, COMMA;
terminal LBRACE, RBRACE, LPAREN, RPAREN;

terminal PLUS, MINUS, MUL, DIV;

terminal GE, LE, EQ, NE, GT, LT;

terminal ASSIGN, UMINUS;

terminal NUMBER;
terminal ID;

// nao terminais
non terminal             expr_list;
non terminal Double      expr;

//precedencias
precedence left GT, LT, GE, LE, EQ, NE;
precedence left PLUS, MINUS;
precedence left MUL, DIV;
precedence right UMINUS;

//regras da gramatica
expr_list
        ::= expr_list expr:e SEMI   {: System.out.println(e); :}
        |  expr:e SEMI              {: System.out.println(e); :}
        | WHILE LPAREN expr:e RPAREN LBRACE expr_list:s RBRACE    
            {: while (e == 1.0) { System.out.println("Executando WHILE"); System.out.println(e); } :}
        | IF LPAREN expr:e RPAREN LBRACE expr_list:s RBRACE           
            {: if (e != 1.0) System.out.println("deu merda"); else System.out.println(s); :}
        | ID
        ;

expr    ::= expr:e1 PLUS  expr:e2   {: RESULT = e1 +  e2; :}
        |  expr:e1 MINUS expr:e2    {: RESULT = e1 -  e2; :}
        |  expr:e1 MUL   expr:e2    {: RESULT = e1 *  e2; :}
        |  expr:e1 DIV   expr:e2    {: if (e2 == 0) throw new Exception("nÃ£o pode dividir por 0");
                                       RESULT = e1 / e2; :}
        |  expr:e1 GE    expr:e2    {: RESULT = (e1 >= e2) ? 1.0 : 0.0; :}
        |  expr:e1 LE    expr:e2    {: RESULT = (e1 <= e2) ? 1.0 : 0.0; :}
        |  expr:e1 NE    expr:e2    {: RESULT = (! e1.equals(e2)) ? 1.0 : 0.0; :}
        |  expr:e1 GT    expr:e2    {: RESULT = (e1 >  e2) ? 1.0 : 0.0; :}
        |  expr:e1 LT    expr:e2    {: RESULT = (e1 <  e2) ? 1.0 : 0.0; :}
        |  expr:e1 EQ    expr:e2    {: RESULT = (e1.equals(e2)) ? 1.0 : 0.0; :}
        |  MINUS expr:e  {: RESULT = -e; :}  %prec UMINUS
        |  LPAREN expr:e RPAREN     {: RESULT = e; :}
        |  NUMBER:n                 {: RESULT = (Double) n; :}
        ;

